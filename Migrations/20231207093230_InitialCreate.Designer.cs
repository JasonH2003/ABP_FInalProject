// <auto-generated />
using System;
using FinalProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABP_FInalProject.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20231207093230_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FinalProject.Difficulty", b =>
                {
                    b.Property<int>("DiffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DefaultWeight")
                        .HasColumnType("REAL");

                    b.Property<string>("Diff_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkoutsWorkoutID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiffID");

                    b.HasIndex("MaxID");

                    b.HasIndex("WorkoutsWorkoutID");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("FinalProject.Goals", b =>
                {
                    b.Property<int>("GoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightLbs")
                        .HasColumnType("REAL");

                    b.HasKey("GoalID");

                    b.HasIndex("UserID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("FinalProject.Maxes", b =>
                {
                    b.Property<int>("MaxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaxName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightLbs")
                        .HasColumnType("REAL");

                    b.HasKey("MaxID");

                    b.HasIndex("UserID");

                    b.ToTable("Maxes");
                });

            modelBuilder.Entity("FinalProject.MuscleGroup", b =>
                {
                    b.Property<int>("MuscleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Muscle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkoutsWorkoutID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MuscleID");

                    b.HasIndex("WorkoutsWorkoutID");

                    b.ToTable("MuscleGroups");
                });

            modelBuilder.Entity("FinalProject.ScheduledLift", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("LiftDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "WorkoutID");

                    b.HasIndex("WorkoutID");

                    b.ToTable("ScheduledLifts");
                });

            modelBuilder.Entity("FinalProject.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Birth_Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("BodyWeightLbs")
                        .HasColumnType("REAL");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("HeightFT")
                        .HasColumnType("REAL");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinalProject.WorkoutDifficulty", b =>
                {
                    b.Property<int>("WorkoutID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiffID")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkoutID", "DiffID");

                    b.HasIndex("DiffID");

                    b.ToTable("WorkoutDifficulty");
                });

            modelBuilder.Entity("FinalProject.WorkoutMuscleGroup", b =>
                {
                    b.Property<int>("WorkoutID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MuscleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkoutID", "MuscleID");

                    b.HasIndex("MuscleID");

                    b.ToTable("WorkoutMuscleGroup");
                });

            modelBuilder.Entity("FinalProject.Workouts", b =>
                {
                    b.Property<int>("WorkoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Weighted")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkoutID");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("FinalProject.Difficulty", b =>
                {
                    b.HasOne("FinalProject.Maxes", "Max")
                        .WithMany()
                        .HasForeignKey("MaxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Workouts", null)
                        .WithMany("Difficulty")
                        .HasForeignKey("WorkoutsWorkoutID");

                    b.Navigation("Max");
                });

            modelBuilder.Entity("FinalProject.Goals", b =>
                {
                    b.HasOne("FinalProject.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.Maxes", b =>
                {
                    b.HasOne("FinalProject.User", "User")
                        .WithMany("Maxes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.MuscleGroup", b =>
                {
                    b.HasOne("FinalProject.Workouts", null)
                        .WithMany("MuscleGroups")
                        .HasForeignKey("WorkoutsWorkoutID");
                });

            modelBuilder.Entity("FinalProject.ScheduledLift", b =>
                {
                    b.HasOne("FinalProject.User", "User")
                        .WithMany("ScheduledLift")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Workouts", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FinalProject.WorkoutDifficulty", b =>
                {
                    b.HasOne("FinalProject.Difficulty", "Difficulty")
                        .WithMany("WorkoutDifficulties")
                        .HasForeignKey("DiffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Workouts", "Workout")
                        .WithMany("WorkoutDifficulties")
                        .HasForeignKey("WorkoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FinalProject.WorkoutMuscleGroup", b =>
                {
                    b.HasOne("FinalProject.MuscleGroup", "MuscleGroup")
                        .WithMany("WorkoutMuscleGroups")
                        .HasForeignKey("MuscleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Workouts", "Workout")
                        .WithMany("WorkoutMuscleGroups")
                        .HasForeignKey("WorkoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuscleGroup");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FinalProject.Difficulty", b =>
                {
                    b.Navigation("WorkoutDifficulties");
                });

            modelBuilder.Entity("FinalProject.MuscleGroup", b =>
                {
                    b.Navigation("WorkoutMuscleGroups");
                });

            modelBuilder.Entity("FinalProject.User", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Maxes");

                    b.Navigation("ScheduledLift");
                });

            modelBuilder.Entity("FinalProject.Workouts", b =>
                {
                    b.Navigation("Difficulty");

                    b.Navigation("MuscleGroups");

                    b.Navigation("WorkoutDifficulties");

                    b.Navigation("WorkoutMuscleGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
